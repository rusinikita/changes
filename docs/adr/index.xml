<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ADR on rusinikita/changes</title><link>https://rusinikita.github.io/changes/docs/adr/</link><description>Recent content in ADR on rusinikita/changes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 19 Nov 2023 21:16:54 +0200</lastBuildDate><atom:link href="https://rusinikita.github.io/changes/docs/adr/index.xml" rel="self" type="application/rss+xml"/><item><title>23.10-init</title><link>https://rusinikita.github.io/changes/docs/adr/23.10-init/</link><pubDate>Sat, 25 Nov 2023 20:34:45 +0200</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/23.10-init/</guid><description>warning Disclaimer: This PBR is not intended to be project introduction. Project goal link Simple cli tool for PR validation automation Become simpler to integrate, well documented and faster alternative to Danger Context linkCommit history linkCommit messages quality matters
Examples:
Message format checks Issue actual status check Change log generation Author email domain PR changes linkSimple automation using changes info can encourage developers to spend little time now to save more time on code review and tech debt in future.</description></item><item><title>23.11-docs</title><link>https://rusinikita.github.io/changes/docs/adr/23.11-docs/</link><pubDate>Sat, 25 Nov 2023 20:34:45 +0200</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/23.11-docs/</guid><description>Use cases link Landing/Motivation page Start using, tutorials Find checkers, settings and params variations Contribution guide and ADRs Structure draft link Landing page Main page (overview) How to Recommended configs Changelog Authors and dependencies settings/ checker 1 checker 2 contribution/ add new checker new functions (proposal format) ideas and feedbacks ADRs/ Tools and setup linkI very well known with Hugo and Geekdocs. But I found new beautiful doc theme - lotus.</description></item><item><title>23.11-go-quality</title><link>https://rusinikita.github.io/changes/docs/adr/23.11-go-quality/</link><pubDate>Sat, 25 Nov 2023 20:34:45 +0200</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/23.11-go-quality/</guid><description>WHY link Force code readability Force test quality Force code docs Lint linkI had project with golangci-lint. So I&amp;rsquo;ll use config from it.
Tests link coverage by octocov mutation tests by gremlins Later linkArchitecture metrics like effrit</description></item><item><title>23.11-git-calls</title><link>https://rusinikita.github.io/changes/docs/adr/23.11-git-calls/</link><pubDate>Wed, 29 Nov 2023 20:34:45 +0200</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/23.11-git-calls/</guid><description>What linkProgram must get data from git repository:
Files diff Commit names and authors How link info git cli calls linkThis method is used by reviewdog
Pros:
Simple execution Cons:
Require result parsing App depends on git cli check_circle go-git library linkThis method known to me. I used it in devex
Pros:
Compile safety No dependency on external apps Allows parallel data fetching (speed) Cons:
Binary size Rare dependency Package design link type Git interface { // Branches returns PR source and target branch Branches() (source, target string) // Commits returns PR commits Commits() []Commit // Changes returns PR repository files diff Changes() []FileChange } Few methods to create it:</description></item><item><title>23.12-message-format</title><link>https://rusinikita.github.io/changes/docs/adr/23.12-format-template/</link><pubDate>Sat, 16 Dec 2023 23:36:39 +0800</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/23.12-format-template/</guid><description>Problem linkWe need some format how to describe commit message style in configuration. Because bare regex is too complex for that task.
Variants link /^([\w\-\.]+){1}(\([\w\-\.]+\))?(!)?: (.+)/ # regex {{ type }}{{ (context)? }}: {{ title }} # mustache $type$(context)?$!?: $title # php [task]: [type] [title] # square (type)(\(context\))?(!)?: (title) # regex simplified (type)((context))?(!)?: (title) # regex simplified auto escape [type][(context)]?[!]?: [title] # regex simplified square check_circle regex simplified auto escape chosen linkIt seems like regex simplified square is most obvious.</description></item><item><title>23.12-check-code</title><link>https://rusinikita.github.io/changes/docs/adr/23.12-check-code/</link><pubDate>Tue, 12 Dec 2023 14:05:06 +0200</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/23.12-check-code/</guid><description>info Based on init draft
Goal linkTool intended to be used for complex checking like:
Feature commit must contain new ADR file PR must contain changelog file change Only &amp;lsquo;docs&amp;rsquo; commits can contain doc folder changes Only &amp;lsquo;bump&amp;rsquo; commits can change package.json Only Nikita can edit CI files Commit message format is base linkCommit type and other information is useful for checkers. Because of that, commit messages should be parsed first.</description></item><item><title>23.12-config-file</title><link>https://rusinikita.github.io/changes/docs/adr/23.12-yaml-config/</link><pubDate>Wed, 06 Dec 2023 18:47:42 +0200</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/23.12-yaml-config/</guid><description>Motivation linkSimple json/yaml/toml configuration - key feature. That is more effective than the Danger.
See project goal here
Checkers link PR changes max lines Commit changes max lines Commit format: max length and title regex Footer regex or footer words Conventional commits (check + changelog) Emoji ban, symbol set whitelist Rebase forcing commits: # max: 10 pr-limit: 10 # max commits per PR subject: # default - conventional commit format: &amp;#34;(task) (context)?</description></item><item><title>24.01-scripting</title><link>https://rusinikita.github.io/changes/docs/adr/24.01-scripting/</link><pubDate>Wed, 20 Dec 2023 20:56:40 +0800</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/24.01-scripting/</guid><description>Goal linkAbility to create custom rules inside yaml configuration with fast execution.
Variants link Lua CEL WASM info Why not JavaScript, Lua, or WASM? linkJavaScript and Lua are rich languages that require sandboxing to execute safely. Sandboxing is costly and factors into the &amp;ldquo;what will I let users evaluate?&amp;rdquo; question heavily when the answer is anything more than O(n) complexity.
CEL evaluates linearly with respect to the size of the expression and the input being evaluated when macros are disabled.</description></item></channel></rss>