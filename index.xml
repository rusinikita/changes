<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git Changes validation</title><link>https://rusinikita.github.io/changes/</link><description>Recent content on Git Changes validation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 23 Feb 2024 11:29:18 +0300</lastBuildDate><atom:link href="https://rusinikita.github.io/changes/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>https://rusinikita.github.io/changes/docs/overview/</link><pubDate>Sun, 19 Nov 2023 21:16:54 +0200</pubDate><guid>https://rusinikita.github.io/changes/docs/overview/</guid><description>What linkChanges helps automate code review and enforce team agreements.
It validates git diff with simple configuration and CEL scripting language.
commit: # Commit message format validation. Example - `TEAM-123: fix something` subject: &amp;#39;(issue): (type)? (title)&amp;#39; values: issue: regexp: TEAM-\d&amp;#43; check-functions: - message: use separate PRs for fixes and features # Function checks parsed commit types func: &amp;#39;commits.exists(c, c.type == &amp;#34;fix&amp;#34;) &amp;amp;&amp;amp; commits.exists(c, c.type == &amp;#34;feat&amp;#34;)&amp;#39; - message: page contains draft flag and will not be shown # Function checks changed files and its content func: changes.</description></item><item><title>Commit</title><link>https://rusinikita.github.io/changes/docs/configuration/commit/</link><pubDate>Sat, 27 Jan 2024 18:34:45 +0800</pubDate><guid>https://rusinikita.github.io/changes/docs/configuration/commit/</guid><description>Commit messages validation configuration.
info Optional linkchanges check uses conventional commit by default.
Empty changes.yaml or no file - valid.
commit: # Commit message format for subject validation subject: &amp;#39;(issue): (type)? (title)&amp;#39; # values extracted from commit message values: issue: regexp: ^TEAM-\d&amp;#43;$ Subject format linkcommit.subject - simplified regexp for subject validation.
Examples link (!)?(type)((context))?: (title) - conventional commit with optional context and ! !feat: something fix(ci): something (issue): (title) - simple Jira/Basecamp/GitHub issue, : and title CMD-123: something #123: something (issue): (type)?</description></item><item><title>Functions</title><link>https://rusinikita.github.io/changes/docs/configuration/functions/</link><pubDate>Tue, 30 Jan 2024 00:15:10 +0700</pubDate><guid>https://rusinikita.github.io/changes/docs/configuration/functions/</guid><description>One stop page for check-function writing.
Examples linkUse separate PRs for fixes and features. Function checks parsed commit types.
commits.exists(c, c.type == &amp;#34;fix&amp;#34;) &amp;amp;&amp;amp; commits.exists(c, c.type == &amp;#34;feat&amp;#34;) Page contains draft flag and not shown. Function checks changed files and its content.
changes.filter(c, c.path.endsWith(&amp;#34;.md&amp;#34;) &amp;amp;&amp;amp; c.chunks.exists(ch, ch.content.contains(&amp;#34;draft:&amp;#34;)) ) Too big file change, more than 250 added lines. Using change stats.
changes.filter(change, change.path.endsWith(&amp;#34;.go&amp;#34;) &amp;amp;&amp;amp; change.stats().additions &amp;gt; 250) Commit author email.
commits.filter(commit, !</description></item><item><title>Changelog</title><link>https://rusinikita.github.io/changes/docs/configuration/changelog/</link><pubDate>Sat, 27 Jan 2024 20:19:01 +0800</pubDate><guid>https://rusinikita.github.io/changes/docs/configuration/changelog/</guid><description> warning Sorry, changelog generation in development. Please, vote for solution.</description></item><item><title>Installation</title><link>https://rusinikita.github.io/changes/docs/mvp-usage/</link><pubDate>Sun, 14 Jan 2024 18:38:29 +0800</pubDate><guid>https://rusinikita.github.io/changes/docs/mvp-usage/</guid><description>info Not complete and good documentation. Just instruction for beta adopters. Quick support and communication in project issues. Project folder link Create .changes.yaml (or toml) file inside your repository Setup rules GitLab runner linkInstall changes on to runner machine.
go install github.com/rusinikita/changes/cmd/changes@570e84e Add cli call in .gitlab-ci.yaml
changes check GitHub link Use actions/checkout and actions/setup-go to create environment Call go run github.com/rusinikita/changes/cmd/changes check git-check: name: git-checks runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 with: # skip gh merge commit from diff ref: ${{ github.</description></item><item><title>What is ADR</title><link>https://rusinikita.github.io/changes/docs/adr/what-is-adr/</link><pubDate>Wed, 10 Jan 2024 22:49:49 +0800</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/what-is-adr/</guid><description>warning ADR is not documentation! info ADR - Architectural decision records is form of logging context and alternatives of solution design.
In these documents you can find answers to WHY.
See Red Hat article</description></item><item><title>23.10-init</title><link>https://rusinikita.github.io/changes/docs/adr/23.10-init/</link><pubDate>Sat, 25 Nov 2023 20:34:45 +0200</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/23.10-init/</guid><description>warning Disclaimer: This ADR is not intended to be project introduction. Project goal link Simple cli tool for PR validation automation Become simpler to integrate, well documented and faster alternative to Danger Context linkCommit history linkCommit messages quality matters
Examples:
Message format checks Issue actual status check Change log generation Author email domain PR changes linkSimple automation using changes info can encourage developers to spend little time now to save more time on code review and tech debt in future.</description></item><item><title>23.11-docs</title><link>https://rusinikita.github.io/changes/docs/adr/23.11-docs/</link><pubDate>Sat, 25 Nov 2023 20:34:45 +0200</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/23.11-docs/</guid><description>Use cases link Landing/Motivation page Start using, tutorials Find checkers, settings and params variations Contribution guide and ADRs Structure draft link Landing page Main page (overview) How to Recommended configs Changelog Authors and dependencies settings/ checker 1 checker 2 contribution/ add new checker new functions (proposal format) ideas and feedbacks ADRs/ Tools and setup linkI very well known with Hugo and Geekdocs. But I found new beautiful doc theme - lotus.</description></item><item><title>23.11-git-calls</title><link>https://rusinikita.github.io/changes/docs/adr/23.11-git-calls/</link><pubDate>Wed, 29 Nov 2023 20:34:45 +0200</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/23.11-git-calls/</guid><description>What linkProgram must get data from git repository:
Files diff Commit names and authors How link info git cli calls linkThis method is used by reviewdog
Pros:
Simple execution Cons:
Require result parsing App depends on git cli check_circle go-git library linkThis method known to me. I used it in devex
Pros:
Compile safety No dependency on external apps Allows parallel data fetching (speed) Cons:
Binary size Rare dependency Package design link type Git interface { // Branches returns PR source and target branch Branches() (source, target string) // Commits returns PR commits Commits() []Commit // Changes returns PR repository files diff Changes() []FileChange } Few methods to create it:</description></item><item><title>23.11-go-quality</title><link>https://rusinikita.github.io/changes/docs/adr/23.11-go-quality/</link><pubDate>Sat, 25 Nov 2023 20:34:45 +0200</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/23.11-go-quality/</guid><description>WHY link Force code readability Force test quality Force code docs Lint linkI had project with golangci-lint. So I&amp;rsquo;ll use config from it.
Tests link coverage by octocov mutation tests by gremlins Later linkArchitecture metrics like effrit</description></item><item><title>23.12-check-code</title><link>https://rusinikita.github.io/changes/docs/adr/23.12-check-code/</link><pubDate>Tue, 12 Dec 2023 14:05:06 +0200</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/23.12-check-code/</guid><description>info Based on init draft
Goal linkTool intended to be used for complex checking like:
Feature commit must contain new ADR file PR must contain changelog file change Only &amp;lsquo;docs&amp;rsquo; commits can contain doc folder changes Only &amp;lsquo;bump&amp;rsquo; commits can change package.json Only Nikita can edit CI files Commit message format is base linkCommit type and other information is useful for checkers. Because of that, commit messages should be parsed first.</description></item><item><title>23.12-message-format</title><link>https://rusinikita.github.io/changes/docs/adr/23.12-format-template/</link><pubDate>Sat, 16 Dec 2023 23:36:39 +0800</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/23.12-format-template/</guid><description>Problem linkWe need some format how to describe commit message style in configuration. Because bare regex is too complex for that task.
Variants link /^([\w\-\.]+){1}(\([\w\-\.]+\))?(!)?: (.+)/ # regex {{ type }}{{ (context)? }}: {{ title }} # mustache $type$(context)?$!?: $title # php [task]: [type] [title] # square (type)(\(context\))?(!)?: (title) # regex simplified (type)((context))?(!)?: (title) # regex simplified auto escape [type][(context)]?[!]?: [title] # regex simplified square check_circle regex simplified auto escape chosen linkIt seems like regex simplified square is most obvious.</description></item><item><title>23.12-config-file</title><link>https://rusinikita.github.io/changes/docs/adr/23.12-yaml-config/</link><pubDate>Wed, 06 Dec 2023 18:47:42 +0200</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/23.12-yaml-config/</guid><description>Motivation linkSimple json/yaml/toml configuration - key feature. That is more effective than the Danger.
See project goal here
Checkers link PR changes max lines Commit changes max lines Commit format: max length and title regex Footer regex or footer words Conventional commits (check + changelog) Emoji ban, symbol set whitelist Rebase forcing commits: # max: 10 pr-limit: 10 # max commits per PR subject: # default - conventional commit format: &amp;#34;(task) (context)?</description></item><item><title>24.01-scripting</title><link>https://rusinikita.github.io/changes/docs/adr/24.01-scripting/</link><pubDate>Wed, 20 Dec 2023 20:56:40 +0800</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/24.01-scripting/</guid><description>Goal linkAbility to create custom rules inside yaml configuration with fast execution.
Variants link Lua CEL WASM info Why not JavaScript, Lua, or WASM? linkJavaScript and Lua are rich languages that require sandboxing to execute safely. Sandboxing is costly and factors into the &amp;ldquo;what will I let users evaluate?&amp;rdquo; question heavily when the answer is anything more than O(n) complexity.
CEL evaluates linearly with respect to the size of the expression and the input being evaluated when macros are disabled.</description></item><item><title>24.01-docs-and-v1</title><link>https://rusinikita.github.io/changes/docs/adr/24.01-v1-dev-plan/</link><pubDate>Tue, 09 Jan 2024 13:20:49 +0800</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/24.01-v1-dev-plan/</guid><description>Prototype is finished. Next goal is good marketing message and starting documentation.
%%{init: { &amp;#39;theme&amp;#39;: &amp;#39;dark&amp;#39; } }%% timeline Tools : Config variables renaming : Writing style and spell check Docs : Overview and config top view : Quick start : CI setup : Subject format : Scripting (values, types, functions) : Rules library : Code (Tools and Libs, Contribution, Authors) : Landing rework Changelog gen : All : Last version : Gen, set tag and commit Renaming link commit.</description></item><item><title>24.02-output-message</title><link>https://rusinikita.github.io/changes/docs/adr/24.02-output-message/</link><pubDate>Fri, 23 Feb 2024 11:29:18 +0300</pubDate><guid>https://rusinikita.github.io/changes/docs/adr/24.02-output-message/</guid><description>Context linkTool developed as alternative to Danger. Important to have ability to post message in Pull Request.
Overview page has message about ugly output.
Output linkMarkdown link ## Commits - No more than 4 commits 9999999: bla bla - some error - some error 2141234: blabla bla - some error - some error ## Changes commit/value/get.go - some error - some error Terminal link Commits ------- - No more than 4 commits 9999999: bla bla - some error - some error 2141234: blabla bla - some error - some error Changes ------- .</description></item></channel></rss>