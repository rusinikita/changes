// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"sync"
)

// Ensure, that ConfMock does implement Conf.
// If this is not the case, regenerate this file with moq.
var _ Conf = &ConfMock{}

// ConfMock is a mock implementation of Conf.
//
//	func TestSomethingThatUsesConf(t *testing.T) {
//
//		// make and configure a mocked Conf
//		mockedConf := &ConfMock{
//			UnmarshalFunc: func(key string, config any, defaultValue ...any) error {
//				panic("mock out the Unmarshal method")
//			},
//		}
//
//		// use mockedConf in code that requires Conf
//		// and then make assertions.
//
//	}
type ConfMock struct {
	// UnmarshalFunc mocks the Unmarshal method.
	UnmarshalFunc func(key string, config any, defaultValue ...any) error

	// calls tracks calls to the methods.
	calls struct {
		// Unmarshal holds details about calls to the Unmarshal method.
		Unmarshal []struct {
			// Key is the key argument value.
			Key string
			// Config is the config argument value.
			Config any
			// DefaultValue is the defaultValue argument value.
			DefaultValue []any
		}
	}
	lockUnmarshal sync.RWMutex
}

// Unmarshal calls UnmarshalFunc.
func (mock *ConfMock) Unmarshal(key string, config any, defaultValue ...any) error {
	callInfo := struct {
		Key          string
		Config       any
		DefaultValue []any
	}{
		Key:          key,
		Config:       config,
		DefaultValue: defaultValue,
	}
	mock.lockUnmarshal.Lock()
	mock.calls.Unmarshal = append(mock.calls.Unmarshal, callInfo)
	mock.lockUnmarshal.Unlock()
	if mock.UnmarshalFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UnmarshalFunc(key, config, defaultValue...)
}

// UnmarshalCalls gets all the calls that were made to Unmarshal.
// Check the length with:
//
//	len(mockedConf.UnmarshalCalls())
func (mock *ConfMock) UnmarshalCalls() []struct {
	Key          string
	Config       any
	DefaultValue []any
} {
	var calls []struct {
		Key          string
		Config       any
		DefaultValue []any
	}
	mock.lockUnmarshal.RLock()
	calls = mock.calls.Unmarshal
	mock.lockUnmarshal.RUnlock()
	return calls
}
